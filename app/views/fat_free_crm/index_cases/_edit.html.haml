.remote
  = simple_form_for(@index_case, html: one_submit_only, remote: true) do |f|
    = link_to_close edit_index_case_path(@index_case)
    = f.hidden_field :user_id
    = f.error_messages object_name: t('index_case')

    = render "fat_free_crm/index_cases/top_section",  f: f, edit: true
    = f.fields_for :contact_elicitation_investigation do |investigation|
      = render "fat_free_crm/index_cases/contact_exposures", f: investigation
      = render "fat_free_crm/index_cases/facility_facility_cases", f: investigation
    = render "fat_free_crm/index_cases/clinical_investigations", f: f, entity: @index_case
    = render "fat_free_crm/entities/permissions",  f: f, edit: true, entity: @index_case
    = hook(:entity_form, self, {f: f, entity: @index_case})
    .buttonbar
      - if Setting.compound_address
        = f.submit t(:save_index_case), { onclick: "crm.clear_all_hints()", class: 'btn btn-primary'}
      - else
        = f.submit t(:save_index_case), { class: 'btn btn-primary' }
      = link_to_cancel edit_index_case_path(@index_case)

  = javascript_include_tag("awesomplete")
  = stylesheet_link_tag("awesomplete")

:javascript
  var myFunc = function func(element, sibling_element_id){
    var new_date = new Date();
    if ( myFunc.last_call && (myFunc.last_call - new_date) > 0) return true;
    myFunc.last_call = new Date(new_date.getTime() + 300);
    event.preventDefault();
    var time = new_date.getTime();
    var regexp = new RegExp(element.data('id'), 'g');
    element.before(element.data('fields').replace(regexp, time));
    var elements = element.siblings(sibling_element_id).find('.contact-field input[type="text"]').toArray();
    loadContactFields(elements);
    var facility_elements = element.siblings(sibling_element_id).find('.facility-field input[type="text"]').toArray();
    loadFacilityFields(facility_elements);
    return false;
  };