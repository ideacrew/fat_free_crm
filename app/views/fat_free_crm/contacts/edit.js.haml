- entity_name = controller.controller_name.demodulize.singularize.underscore #account
- @entity = instance_variable_get("@#{entity_name}")
- id = "#{entity_name}_#{@entity.id}"
- contacts = FatFreeCrm::Contact.all.pluck(:first_name, :last_name, :id).map { |(first_name, last_name, id)| ["#{first_name} #{last_name}", id]}

- if params[:cancel].true? # <--------------------- Hide [Edit]

  - if called_from_landing_page?
    crm.flip_form('edit_#{entity_name}');
    crm.set_title('edit_#{entity_name}', '#{h @entity.name}');
  - else                                            # Called from index page...
    $('##{id}').replaceWith('#{ j render(partial: entity_name, collection: [ @entity ]) }');


- else # <----------------------------------------- Show [Edit Contact] form.

  - if params[:cancel].blank?                       # Called from contacts list item...
    - if @previous                                  # Hide open [Edit Contact] form if any.
      - if @previous.is_a?(FatFreeCrm::Contact)
        $('##{dom_id(@previous)}').replaceWith('#{ j render(partial: entity_name, collection: [ @previous ]) }');
      - else
        crm.flick('#{entity_name}_#{@previous}', 'remove');
    -# Disable onMouseOver for the list item.
    crm.highlight_off('#{id}');
    -# Hide [Create] form if any.
    crm.hide_form('create_#{entity_name}');
    -# Show [Edit] form.
    $('##{id}').html('#{ j render(partial: "edit") }');


  - elsif params[:cancel].false?                    # Called from title of the contact landing page...
    $('#edit_#{entity_name}').html('#{ j render(partial: "edit") }');
    crm.flip_form('edit_#{entity_name}');
    crm.set_title('edit_#{entity_name}', "#{t :edit} #{h @entity.full_name}");

  function loadContactFields(contact_inputs) {
  contact_inputs.forEach(function(input){
  new Awesomplete(input, {list: #{contacts.to_json.html_safe},
  replace: function(suggestion) {
  this.input.value = suggestion.label;
  this.input.parentElement.nextElementSibling.value = suggestion.value;
  }});
  })
  }
  var elements = document.querySelectorAll('.contact-field input[type="text"]');
  loadContactFields(elements);

  var prependFormWithContactFields = function func(element, sibling_element_id){
  var new_date = new Date();
  if ( prependFormWithContactFields.last_call && (prependFormWithContactFields.last_call - new_date) > 0) return true;
  prependFormWithContactFields.last_call = new Date(new_date.getTime() + 300);
  event.preventDefault();
  var time = new_date.getTime();
  var regexp = new RegExp(element.data('id'), 'g');
  element.before(element.data('fields').replace(regexp, time));
  var elements = element.siblings(sibling_element_id).find('.contact-field input[type="text"]').toArray();
  loadContactFields(elements);
  return false;
  };

  var facility_and_level = #{raw FatFreeCrm::Level.all.group_by(&:facility_id).reduce({}) { |result, (facility_id, levels)| result.merge facility_id => levels.map(&:attributes) }.to_json}
  var assignments = document.querySelector('.contact-assignments')
  assignments.addEventListener('change', function(event) {
  if (event.target.classList.contains('facility-select')) {
  var level_select = event.target.closest('.contact_assignment').querySelector('select[name*="level_id"]');
  if (facility_and_level[event.target.value]) {
  while (level_select.firstChild) {
  level_select.removeChild(level_select.firstChild);
  }
  facility_and_level[event.target.value].forEach(function(level) {
  level_select.add(new Option(level.name, level.id))
  })
  level_select.parentNode.classList.remove('d-none');
  } else {
  level_select.parentNode.classList.add('d-none');
  }
  }
  });
  crm.create_or_select_account(#{ request.referer =~ /\/accounts\// || @account.id.blank? });
